package com.brandyodhiambo.bibleApi.feature.analyticsmgt.service;

import com.brandyodhiambo.bibleApi.feature.analyticsmgt.models.ParticipationMetrics;
import com.brandyodhiambo.bibleApi.feature.analyticsmgt.models.ReadingProgress;
import com.brandyodhiambo.bibleApi.feature.analyticsmgt.models.dto.GroupAnalyticsResponse;
import com.brandyodhiambo.bibleApi.feature.analyticsmgt.models.dto.ParticipationMetricsResponse;
import com.brandyodhiambo.bibleApi.feature.analyticsmgt.models.dto.ReadingProgressResponse;
import com.brandyodhiambo.bibleApi.feature.analyticsmgt.repository.ParticipationMetricsRepository;
import com.brandyodhiambo.bibleApi.feature.analyticsmgt.repository.ReadingProgressRepository;
import com.brandyodhiambo.bibleApi.feature.eventmgt.repository.SessionRSVPRepository;
import com.brandyodhiambo.bibleApi.feature.eventmgt.repository.StudySessionRepository;
import com.brandyodhiambo.bibleApi.feature.groupmgt.models.Group;
import com.brandyodhiambo.bibleApi.feature.groupmgt.repository.GroupRepository;
import com.brandyodhiambo.bibleApi.feature.prayermgt.repository.PrayerRequestRepository;
import com.brandyodhiambo.bibleApi.feature.studymgt.models.ReadingPlan;
import com.brandyodhiambo.bibleApi.feature.studymgt.repository.CommentRepository;
import com.brandyodhiambo.bibleApi.feature.studymgt.repository.ReadingPlanRepository;
import com.brandyodhiambo.bibleApi.feature.usermgt.models.Users;
import com.brandyodhiambo.bibleApi.feature.usermgt.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AnalyticsServiceImplTest {

    @Mock
    private ReadingProgressRepository readingProgressRepository;

    @Mock
    private ParticipationMetricsRepository participationMetricsRepository;

    @Mock
    private GroupRepository groupRepository;

    @Mock
    private UserRepository userRepository;

    @Mock
    private ReadingPlanRepository readingPlanRepository;

    @Mock
    private SessionRSVPRepository sessionRSVPRepository;

    @Mock
    private StudySessionRepository studySessionRepository;

    @Mock
    private PrayerRequestRepository prayerRequestRepository;

    @Mock
    private CommentRepository commentRepository;

    @InjectMocks
    private AnalyticsServiceImpl analyticsService;

    private Users user;
    private Group group;
    private ReadingPlan readingPlan;
    private ReadingProgress readingProgress;
    private ParticipationMetrics participationMetrics;
    private YearMonth currentPeriod;

    @BeforeEach
    void setUp() {
        // Set up test data
        user = new Users();
        user.setUsername("testuser");
        user.setFirstName("Test");
        user.setLastName("User");
        user.setEmail("test@example.com");
        user.setPassword("password");
        user.setEmailVerified(true);

        // Note: We don't set the ID directly as it's generated by the database
        // For testing, we'll use the username for identification instead

        group = new Group();
        group.setId(1L);
        group.setName("Test Group");
        group.setLeader(user);
        group.setMembers(new HashSet<>());
        group.getMembers().add(user);

        readingPlan = new ReadingPlan();
        readingPlan.setId(1L);
        readingPlan.setTitle("Test Reading Plan");
        readingPlan.setGroup(group);
        readingPlan.setCreatedBy(user);

        readingProgress = ReadingProgress.builder()
                .id(1L)
                .readingPlan(readingPlan)
                .user(user)
                .completionPercentage(50)
                .lastCompletedReference("Genesis 1:10")
                .lastActivityDate(LocalDate.now())
                .completed(false)
                .build();

        currentPeriod = YearMonth.now();

        participationMetrics = ParticipationMetrics.builder()
                .id(1L)
                .group(group)
                .user(user)
                .periodYear(currentPeriod.getYear())
                .periodMonth(currentPeriod.getMonthValue())
                .sessionsAttended(5)
                .totalSessions(8)
                .chatMessagesSent(12)
                .prayerRequestsSubmitted(3)
                .prayerRequestsAnswered(1)
                .studyCommentsMade(7)
                .engagementScore(75)
                .lastUpdatedDate(LocalDate.now())
                .build();
    }

    @Test
    void trackReadingProgress_NewProgress_ShouldCreateAndReturnProgress() {
        // Arrange
        when(readingPlanRepository.findById(anyLong())).thenReturn(Optional.of(readingPlan));
        when(userRepository.getUserByName(anyString())).thenReturn(user);
        when(readingProgressRepository.findByReadingPlanAndUser(any(ReadingPlan.class), any(Users.class)))
                .thenReturn(Optional.empty());
        when(readingProgressRepository.save(any(ReadingProgress.class))).thenReturn(readingProgress);

        // Act
        ReadingProgressResponse response = analyticsService.trackReadingProgress(
                1L, "testuser", 50, "Genesis 1:10");

        // Assert
        assertNotNull(response);
        assertEquals(1L, response.getId());
        assertEquals(50, response.getCompletionPercentage());
        assertEquals("Genesis 1:10", response.getLastCompletedReference());
        assertFalse(response.isCompleted());

        verify(readingProgressRepository).save(any(ReadingProgress.class));
    }

    @Test
    void trackReadingProgress_ExistingProgress_ShouldUpdateAndReturnProgress() {
        // Arrange
        when(readingPlanRepository.findById(anyLong())).thenReturn(Optional.of(readingPlan));
        when(userRepository.getUserByName(anyString())).thenReturn(user);
        when(readingProgressRepository.findByReadingPlanAndUser(any(ReadingPlan.class), any(Users.class)))
                .thenReturn(Optional.of(readingProgress));
        when(readingProgressRepository.save(any(ReadingProgress.class))).thenReturn(readingProgress);

        // Act
        ReadingProgressResponse response = analyticsService.trackReadingProgress(
                1L, "testuser", 75, "Genesis 2:10");

        // Assert
        assertNotNull(response);
        assertEquals(1L, response.getId());

        verify(readingProgressRepository).save(any(ReadingProgress.class));
    }

    @Test
    void getReadingProgress_ShouldReturnProgress() {
        // Arrange
        when(readingPlanRepository.findById(anyLong())).thenReturn(Optional.of(readingPlan));
        when(userRepository.getUserByName(anyString())).thenReturn(user);
        when(readingProgressRepository.findByReadingPlanAndUser(any(ReadingPlan.class), any(Users.class)))
                .thenReturn(Optional.of(readingProgress));

        // Act
        ReadingProgressResponse response = analyticsService.getReadingProgress(1L, "testuser");

        // Assert
        assertNotNull(response);
        assertEquals(1L, response.getId());
        assertEquals(50, response.getCompletionPercentage());
    }

    @Test
    void getUserReadingProgress_ShouldReturnListOfProgress() {
        // Arrange
        when(userRepository.getUserByName(anyString())).thenReturn(user);
        when(readingProgressRepository.findByUser(any(Users.class)))
                .thenReturn(List.of(readingProgress));

        // Act
        List<ReadingProgressResponse> response = analyticsService.getUserReadingProgress("testuser");

        // Assert
        assertNotNull(response);
        assertEquals(1, response.size());
        assertEquals(1L, response.get(0).getId());
    }

    @Test
    void getParticipationMetrics_ShouldReturnMetrics() {
        // Arrange
        when(groupRepository.findById(anyLong())).thenReturn(Optional.of(group));
        when(userRepository.getUserByName(anyString())).thenReturn(user);
        when(participationMetricsRepository.findByGroupAndUserAndPeriodYearAndPeriodMonth(
                any(Group.class), any(Users.class), anyInt(), anyInt()))
                .thenReturn(Optional.of(participationMetrics));

        // Act
        ParticipationMetricsResponse response = analyticsService.getParticipationMetrics(
                1L, "testuser", currentPeriod);

        // Assert
        assertNotNull(response);
        assertEquals(1L, response.getId());
        assertEquals(5, response.getSessionsAttended());
        assertEquals(8, response.getTotalSessions());
        assertEquals(75, response.getEngagementScore());
    }

    @Test
    void getGroupAnalytics_ShouldReturnAnalytics() {
        // Arrange
        when(groupRepository.findById(anyLong())).thenReturn(Optional.of(group));
        when(participationMetricsRepository.findByGroupAndPeriodYearAndPeriodMonth(
                any(Group.class), anyInt(), anyInt()))
                .thenReturn(List.of(participationMetrics));
        when(readingPlanRepository.findByGroup(any(Group.class)))
                .thenReturn(List.of(readingPlan));
        when(readingProgressRepository.calculateAverageCompletionPercentage(any(ReadingPlan.class)))
                .thenReturn(50.0);

        // Act
        GroupAnalyticsResponse response = analyticsService.getGroupAnalytics(1L, currentPeriod);

        // Assert
        assertNotNull(response);
        assertEquals(1L, response.getGroupId());
        assertEquals("Test Group", response.getGroupName());
        assertEquals(currentPeriod, response.getPeriod());
        assertEquals(1, response.getTotalMembers());
        assertEquals(8, response.getTotalSessions());
        assertNotNull(response.getAverageAttendancePercentage());
        assertNotNull(response.getAverageEngagementScore());
    }

    @Test
    void generateAttendanceReport_ShouldReturnSortedList() {
        // Arrange
        when(groupRepository.findById(anyLong())).thenReturn(Optional.of(group));
        when(participationMetricsRepository.findByGroupAndPeriodYearAndPeriodMonth(
                any(Group.class), anyInt(), anyInt()))
                .thenReturn(List.of(participationMetrics));

        // Act
        List<ParticipationMetricsResponse> response = analyticsService.generateAttendanceReport(
                1L, currentPeriod);

        // Assert
        assertNotNull(response);
        assertEquals(1, response.size());
        assertEquals(1L, response.get(0).getId());
    }
}
